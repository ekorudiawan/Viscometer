;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/17/2012
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8535
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <alcd.h>
;
;unsigned int timerOverflow;
;
;long durasiMs;
;long durasiUs;
;
;char bufferLcd[16];
;
;bit startCount = 0;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void) {
; 0000 0026 interrupt [2] void ext_int0_isr(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0027    durasiUs = 0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0028    durasiMs = 0;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0029    timerOverflow = 0;
;PCODE: $00000013 VOL: 0
; 0000 002A    TCNT1 = 0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002B    //lcd_clear();
; 0000 002C    lcd_gotoxy(0,0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002D    lcd_puts("Viscometer      ");
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002E    lcd_gotoxy(0,1);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002F    lcd_puts("Timer Start     ");
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0030    startCount = 1;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0031 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0

	.DSEG
_0x3:
	.BYTE 0x22
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void) {
; 0000 0034 interrupt [3] void ext_int1_isr(void) {

	.CSEG
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0035    // Clock value: 15.625 kHz
; 0000 0036    // T = 1/F = 1/15625 =  0.000064 S = 64uS
; 0000 0037    if(startCount) {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0038       durasiUs = (timerOverflow * (64 * 65535)) + ((long)TCNT1 * 64);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0039       durasiMs = durasiUs/1000;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 003A       sprintf(bufferLcd,"Time = %5d ms",durasiMs);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 003B       lcd_clear();
;PCODE: $0000004E VOL: 0
; 0000 003C       lcd_gotoxy(0,0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 003D       lcd_puts("Viscometer      ");
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 003E       lcd_gotoxy(0,1);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 003F       lcd_puts(bufferLcd);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0040       startCount = 0;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0041    }
; 0000 0042 }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0

	.DSEG
_0x5:
	.BYTE 0x11
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void) {
; 0000 0045 interrupt [9] void timer1_ovf_isr(void) {

	.CSEG
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0046    timerOverflow++;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0047 }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 004C {
;PCODE: $0000006F VOL: 0
; 0000 004D // Declare your local variables here
; 0000 004E 
; 0000 004F // Input/Output Ports initialization
; 0000 0050 // Port A initialization
; 0000 0051 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0052 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0053 PORTA=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0054 DDRA=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0055 
; 0000 0056 // Port B initialization
; 0000 0057 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0058 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0059 PORTB=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 005A DDRB=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 005B 
; 0000 005C // Port C initialization
; 0000 005D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005F PORTC=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0060 DDRC=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0061 
; 0000 0062 // Port D initialization
; 0000 0063 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0064 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0065 PORTD=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0066 DDRD=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0067 
; 0000 0068 // Timer/Counter 0 initialization
; 0000 0069 // Clock source: System Clock
; 0000 006A // Clock value: Timer 0 Stopped
; 0000 006B // Mode: Normal top=0xFF
; 0000 006C // OC0 output: Disconnected
; 0000 006D TCCR0=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 006E TCNT0=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006F OCR0=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0070 
; 0000 0071 // Timer/Counter 1 initialization
; 0000 0072 // Clock source: System Clock
; 0000 0073 // Clock value: 15.625 kHz
; 0000 0074 // Mode: Normal top=0xFFFF
; 0000 0075 // OC1A output: Discon.
; 0000 0076 // OC1B output: Discon.
; 0000 0077 // Noise Canceler: Off
; 0000 0078 // Input Capture on Falling Edge
; 0000 0079 // Timer1 Overflow Interrupt: On
; 0000 007A // Input Capture Interrupt: Off
; 0000 007B // Compare A Match Interrupt: Off
; 0000 007C // Compare B Match Interrupt: Off
; 0000 007D TCCR1A=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 007E TCCR1B=0x05;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 007F TCNT1H=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0080 TCNT1L=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0081 ICR1H=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0082 ICR1L=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0083 OCR1AH=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0084 OCR1AL=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0085 OCR1BH=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0086 OCR1BL=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0087 
; 0000 0088 // Timer/Counter 2 initialization
; 0000 0089 // Clock source: System Clock
; 0000 008A // Clock value: Timer2 Stopped
; 0000 008B // Mode: Normal top=0xFF
; 0000 008C // OC2 output: Disconnected
; 0000 008D ASSR=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 008E TCCR2=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 008F TCNT2=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0090 OCR2=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0091 
; 0000 0092 // External Interrupt(s) initialization
; 0000 0093 // INT0: On
; 0000 0094 // INT0 Mode: Rising Edge
; 0000 0095 // INT1: On
; 0000 0096 // INT1 Mode: Falling Edge
; 0000 0097 // INT2: Off
; 0000 0098 GICR|=0xC0;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0099 MCUCR=0x0B;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 009A MCUCSR=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 009B GIFR=0xC0;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 009C 
; 0000 009D // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 009E TIMSK=0x04;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 009F 
; 0000 00A0 // USART initialization
; 0000 00A1 // USART disabled
; 0000 00A2 UCSRB=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00A3 
; 0000 00A4 // Analog Comparator initialization
; 0000 00A5 // Analog Comparator: Off
; 0000 00A6 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00A7 ACSR=0x80;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00A8 SFIOR=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00A9 
; 0000 00AA // ADC initialization
; 0000 00AB // ADC disabled
; 0000 00AC ADCSRA=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00AD 
; 0000 00AE // SPI initialization
; 0000 00AF // SPI disabled
; 0000 00B0 SPCR=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00B1 
; 0000 00B2 // TWI initialization
; 0000 00B3 // TWI disabled
; 0000 00B4 TWCR=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00B5 
; 0000 00B6 // Alphanumeric LCD initialization
; 0000 00B7 // Connections specified in the
; 0000 00B8 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00B9 // RS - PORTA Bit 0
; 0000 00BA // RD - PORTA Bit 1
; 0000 00BB // EN - PORTA Bit 2
; 0000 00BC // D4 - PORTA Bit 4
; 0000 00BD // D5 - PORTA Bit 5
; 0000 00BE // D6 - PORTA Bit 6
; 0000 00BF // D7 - PORTA Bit 7
; 0000 00C0 // Characters/line: 16
; 0000 00C1 lcd_init(16);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00C2 lcd_clear();
;PCODE: $000000BC VOL: 0
; 0000 00C3 lcd_gotoxy(0,0);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00C4 lcd_puts("Viscometer      ");
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00C5 lcd_gotoxy(0,1);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00C6 lcd_puts("Ready           ");
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00C7 
; 0000 00C8 // Global enable interrupts
; 0000 00C9 #asm("sei")
;PCODE: $000000CF VOL: 0
	sei
;PCODE: $000000D0 VOL: 0
; 0000 00CA 
; 0000 00CB while (1)
;PCODE: $000000D1 VOL: 0
; 0000 00CC       {
; 0000 00CD       // Place your code here
; 0000 00CE 
; 0000 00CF       }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00D0 }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0

	.DSEG
_0x6:
	.BYTE 0x22
